{
    "Description": "No Description Specified", 
    "Mappings": {
        "RegionMap": {
            "ap-northeast-1": {
                "az0Name": "ap-northeast-1a", 
                "az1Name": "ap-northeast-1b", 
                "elbAccountId": "582318560864", 
                "natAmiId": "ami-5f840e5e", 
                "ubuntu1404LtsAmiId": "ami-bddaa2bc"
            }, 
            "ap-southeast-1": {
                "az0Name": "ap-southeast-1a", 
                "az1Name": "ap-southeast-1b", 
                "elbAccountId": "114774131450", 
                "natAmiId": "ami-780a432a", 
                "ubuntu1404LtsAmiId": "ami-9a7724c8"
            }, 
            "ap-southeast-2": {
                "az0Name": "ap-southeast-2a", 
                "az1Name": "ap-southeast-2b", 
                "elbAccountId": "783225319266", 
                "natAmiId": "ami-0154c73b", 
                "ubuntu1404LtsAmiId": "ami-43128a79"
            }, 
            "eu-west-1": {
                "az0Name": "eu-west-1a", 
                "az1Name": "eu-west-1b", 
                "elbAccountId": "156460612806", 
                "natAmiId": "ami-ed352799", 
                "ubuntu1404LtsAmiId": "ami-896c96fe"
            }, 
            "sa-east-1": {
                "az0Name": "sa-east-1a", 
                "az1Name": "sa-east-1b", 
                "elbAccountId": "507241528517", 
                "natAmiId": "ami-7660c56b", 
                "ubuntu1404LtsAmiId": "ami-7315b76e"
            }, 
            "us-east-1": {
                "az0Name": "us-east-1a", 
                "az1Name": "us-east-1b", 
                "elbAccountId": "127311923021", 
                "natAmiId": "ami-4f9fee26", 
                "ubuntu1404LtsAmiId": "ami-018c9568"
            }, 
            "us-gov-west-1": {
                "elbAccountId": "048591011584"
            }, 
            "us-west-1": {
                "az0Name": "us-west-1b", 
                "az1Name": "us-west-1c", 
                "elbAccountId": "027434742980", 
                "natAmiId": "ami-7850793d", 
                "ubuntu1404LtsAmiId": "ami-ee4f77ab"
            }, 
            "us-west-2": {
                "az0Name": "us-west-2a", 
                "az1Name": "us-west-2b", 
                "elbAccountId": "797873946194", 
                "natAmiId": "ami-6d29b85d", 
                "ubuntu1404LtsAmiId": "ami-6ac2a85a"
            }
        }, 
        "networkAddresses": {
            "subnet0": {
                "private": "172.16.4.0/22", 
                "public": "172.16.0.0/24"
            }, 
            "subnet1": {
                "private": "172.16.8.0/22", 
                "public": "172.16.1.0/24"
            }, 
            "vpcBase": {
                "cidr": "172.16.0.0/20"
            }
        }
    }, 
    "Outputs": {
        "bastionHostAddress": {
            "Description": "Address to use when accessing the bastion host.", 
            "Value": {
                "Fn::GetAtt": [
                    "bastionInstance", 
                    "PublicDnsName"
                ]
            }
        }, 
        "cloudTrailLoggingBucketAndPath": {
            "Description": "S3 bucket and key name prefix to use when configuring CloudTrail to aggregate logs to S3", 
            "Value": {
                "Fn::Join": [
                    "", 
                    [
                        "arn:aws:s3:::", 
                        {
                            "Ref": "demoUtilityBucket"
                        }, 
                        ""
                    ]
                ]
            }
        }, 
        "dateGenerated": {
            "Description": "UTC datetime representation of when this template was generated", 
            "Value": "2014-05-14 19:12:23.661000"
        }, 
        "elbAccessLoggingBucketAndPath": {
            "Description": "S3 bucket and key name prefix to use when configuring elb access logs to aggregate to S3", 
            "Value": {
                "Fn::Join": [
                    "", 
                    [
                        "arn:aws:s3:::", 
                        {
                            "Ref": "demoUtilityBucket"
                        }, 
                        ""
                    ]
                ]
            }
        }, 
        "templateValidationHash": {
            "Description": "Hash of this template that can be used as a simple means of validating whether a template has been changed since it was generated.", 
            "Value": "4e11e5caa09641eca988d3a92cbd162baeee7561329b0c31af3df02c0dd4f76f"
        }
    }, 
    "Parameters": {
        "bastionInstanceType": {
            "AllowedValues": [
                "t1.micro", 
                "m3.medium", 
                "m3.large", 
                "m3.xlarge", 
                "m3.2xlarge", 
                "m1.small", 
                "m1.medium", 
                "m1.large", 
                "m1.xlarge", 
                "c3.large", 
                "c3.xlarge", 
                "c3.2xlarge", 
                "c3.4xlarge", 
                "c3.8xlarge", 
                "c1.medium", 
                "c1.xlarge", 
                "cc2.xlarge", 
                "g2.2xlarge", 
                "cg1.4xlarge", 
                "m2.xlarge", 
                "m2.2xlarge", 
                "m2.4xlarge", 
                "cr1.8xlarge", 
                "i2.xlarge", 
                "i2.2xlarge", 
                "i2.4xlarge", 
                "hs1.8xlarge", 
                "hs1.4xlarge"
            ], 
            "ConstraintDescription": "must be a valid EC2 instance type.", 
            "Default": "t1.micro", 
            "Description": "Instance type to use when launching the Bastion host for access to resources that are not publicly exposed", 
            "Type": "String"
        }, 
        "ec2Key": {
            "AllowedPattern": "[\\x20-\\x7E]*", 
            "ConstraintDescription": "can only contain ASCII chacacters.", 
            "Default": "", 
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances", 
            "MaxLength": 255, 
            "MinLength": 1, 
            "Type": "String"
        }, 
        "natInstanceType": {
            "AllowedValues": [
                "t1.micro", 
                "m3.medium", 
                "m3.large", 
                "m3.xlarge", 
                "m3.2xlarge", 
                "m1.small", 
                "m1.medium", 
                "m1.large", 
                "m1.xlarge", 
                "c3.large", 
                "c3.xlarge", 
                "c3.2xlarge", 
                "c3.4xlarge", 
                "c3.8xlarge", 
                "c1.medium", 
                "c1.xlarge", 
                "cc2.xlarge", 
                "g2.2xlarge", 
                "cg1.4xlarge", 
                "m2.xlarge", 
                "m2.2xlarge", 
                "m2.4xlarge", 
                "cr1.8xlarge", 
                "i2.xlarge", 
                "i2.2xlarge", 
                "i2.4xlarge", 
                "hs1.8xlarge", 
                "hs1.4xlarge"
            ], 
            "ConstraintDescription": "must be a valid EC2 instance type.", 
            "Default": "m1.small", 
            "Description": "Instance type to use when launching NAT instances.", 
            "Type": "String"
        }, 
        "remoteAccessLocation": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})", 
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x", 
            "Default": "0.0.0.0/0", 
            "MaxLength": 18, 
            "MinLength": 9, 
            "Type": "String"
        }
    }, 
    "Resources": {
        "bastionInstance": {
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "ubuntu1404LtsAmiId"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "bastionInstanceType"
                }, 
                "KeyName": {
                    "Ref": "ec2Key"
                }, 
                "Monitoring": "true", 
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true", 
                        "DeleteOnTermination": "true", 
                        "Description": "ENI for the bastion host", 
                        "DeviceIndex": "0", 
                        "GroupSet": [
                            {
                                "Ref": "bastionSecurityGroup"
                            }
                        ], 
                        "SubnetId": {
                            "Ref": "publicSubnet0"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "bastionHost"
                    }
                ]
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "bastionSecurityGroup": {
            "Properties": {
                "GroupDescription": "Security group allowing ingress via SSH to this instance along with other standard accessbility port rules", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "networkAddresses", 
                                "vpcBase", 
                                "cidr"
                            ]
                        }, 
                        "FromPort": "22", 
                        "IpProtocol": "tcp", 
                        "ToPort": "22"
                    }, 
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "80", 
                        "IpProtocol": "tcp", 
                        "ToPort": "80"
                    }, 
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "443", 
                        "IpProtocol": "tcp", 
                        "ToPort": "443"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "remoteAccessLocation"
                        }, 
                        "FromPort": "22", 
                        "IpProtocol": "tcp", 
                        "ToPort": "22"
                    }
                ], 
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "demoUtilityBucket": {
            "Type": "AWS::S3::Bucket"
        }, 
        "demoUtilityBucketCloudTrailLoggingPolicy": {
            "DependsOn": [
                "demoUtilityBucketELBLoggingPolicy"
            ], 
            "Properties": {
                "Bucket": {
                    "Ref": "demoUtilityBucket"
                }, 
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "s3:GetBucketAcl"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "AWS": [
                                    "arn:aws:iam::086441151436:root", 
                                    "arn:aws:iam::113285607260:root"
                                ]
                            }, 
                            "Resource": {
                                "Fn::Join": [
                                    "", 
                                    [
                                        "arn:aws:s3:::", 
                                        {
                                            "Ref": "demoUtilityBucket"
                                        }
                                    ]
                                ]
                            }
                        }, 
                        {
                            "Action": [
                                "s3:PutObject"
                            ], 
                            "Condition": {
                                "StringEquals": {
                                    "s3:x-amz-acl": "bucket-owner-full-control"
                                }
                            }, 
                            "Effect": "Allow", 
                            "Principal": {
                                "AWS": [
                                    "arn:aws:iam::086441151436:root", 
                                    "arn:aws:iam::113285607260:root"
                                ]
                            }, 
                            "Resource": {
                                "Fn::Join": [
                                    "", 
                                    [
                                        "arn:aws:s3:::", 
                                        {
                                            "Ref": "demoUtilityBucket"
                                        }, 
                                        "AWSLogs/", 
                                        {
                                            "Ref": "AWS::AccountId"
                                        }, 
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ]
                }
            }, 
            "Type": "AWS::S3::BucketPolicy"
        }, 
        "demoUtilityBucketELBLoggingPolicy": {
            "Properties": {
                "Bucket": {
                    "Ref": "demoUtilityBucket"
                }, 
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "s3:PutObject"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "AWS": [
                                    {
                                        "Fn::FindInMap": [
                                            "RegionMap", 
                                            {
                                                "Ref": "AWS::Region"
                                            }, 
                                            "elbAccountId"
                                        ]
                                    }
                                ]
                            }, 
                            "Resource": {
                                "Fn::Join": [
                                    "", 
                                    [
                                        "arn:aws:s3:::", 
                                        {
                                            "Ref": "demoUtilityBucket"
                                        }, 
                                        "AWSLogs/", 
                                        {
                                            "Ref": "AWS::AccountId"
                                        }, 
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ]
                }
            }, 
            "Type": "AWS::S3::BucketPolicy"
        }, 
        "igwVpcAttachment": {
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "vpcIgw"
                }, 
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::VPCGatewayAttachment"
        }, 
        "privateSubnet0": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "az0Name"
                    ]
                }, 
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "networkAddresses", 
                        "subnet0", 
                        "private"
                    ]
                }, 
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::Subnet"
        }, 
        "privateSubnet0EgressRoute": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0", 
                "InstanceId": {
                    "Ref": "public0NATInstance"
                }, 
                "RouteTableId": {
                    "Ref": "privateSubnet0RouteTable"
                }
            }, 
            "Type": "AWS::EC2::Route"
        }, 
        "privateSubnet0EgressRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "privateSubnet0RouteTable"
                }, 
                "SubnetId": {
                    "Ref": "privateSubnet0"
                }
            }, 
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        }, 
        "privateSubnet0RouteTable": {
            "Properties": {
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::RouteTable"
        }, 
        "privateSubnet1": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "az1Name"
                    ]
                }, 
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "networkAddresses", 
                        "subnet1", 
                        "private"
                    ]
                }, 
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::Subnet"
        }, 
        "privateSubnet1EgressRoute": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0", 
                "InstanceId": {
                    "Ref": "public1NATInstance"
                }, 
                "RouteTableId": {
                    "Ref": "privateSubnet1RouteTable"
                }
            }, 
            "Type": "AWS::EC2::Route"
        }, 
        "privateSubnet1EgressRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "privateSubnet1RouteTable"
                }, 
                "SubnetId": {
                    "Ref": "privateSubnet1"
                }
            }, 
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        }, 
        "privateSubnet1RouteTable": {
            "Properties": {
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::RouteTable"
        }, 
        "public0NATInstance": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "az0Name"
                    ]
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "natAmiId"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "natInstanceType"
                }, 
                "KeyName": {
                    "Ref": "ec2Key"
                }, 
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true", 
                        "DeleteOnTermination": "true", 
                        "DeviceIndex": "0", 
                        "GroupSet": [
                            {
                                "Ref": "publicSubnet0SecurityGroup"
                            }
                        ], 
                        "SubnetId": {
                            "Ref": "publicSubnet0"
                        }
                    }
                ], 
                "SourceDestCheck": "false"
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "public1NATInstance": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "az1Name"
                    ]
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "natAmiId"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "natInstanceType"
                }, 
                "KeyName": {
                    "Ref": "ec2Key"
                }, 
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true", 
                        "DeleteOnTermination": "true", 
                        "DeviceIndex": "0", 
                        "GroupSet": [
                            {
                                "Ref": "publicSubnet1SecurityGroup"
                            }
                        ], 
                        "SubnetId": {
                            "Ref": "publicSubnet1"
                        }
                    }
                ], 
                "SourceDestCheck": "false"
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "publicSubnet0": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "az0Name"
                    ]
                }, 
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "networkAddresses", 
                        "subnet0", 
                        "public"
                    ]
                }, 
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::Subnet"
        }, 
        "publicSubnet0EgressRoute": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0", 
                "GatewayId": {
                    "Ref": "vpcIgw"
                }, 
                "RouteTableId": {
                    "Ref": "publicSubnet0RouteTable"
                }
            }, 
            "Type": "AWS::EC2::Route"
        }, 
        "publicSubnet0EgressRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "publicSubnet0RouteTable"
                }, 
                "SubnetId": {
                    "Ref": "publicSubnet0"
                }
            }, 
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        }, 
        "publicSubnet0RouteTable": {
            "Properties": {
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::RouteTable"
        }, 
        "publicSubnet0SecurityGroup": {
            "Properties": {
                "GroupDescription": "Security Group for the public subnet for az 0", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "-1", 
                        "IpProtocol": "-1", 
                        "ToPort": "-1"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "networkAddresses", 
                                "subnet0", 
                                "private"
                            ]
                        }, 
                        "FromPort": "-1", 
                        "IpProtocol": "-1", 
                        "ToPort": "-1"
                    }
                ], 
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "publicSubnet1": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "az1Name"
                    ]
                }, 
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "networkAddresses", 
                        "subnet1", 
                        "public"
                    ]
                }, 
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::Subnet"
        }, 
        "publicSubnet1EgressRoute": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0", 
                "GatewayId": {
                    "Ref": "vpcIgw"
                }, 
                "RouteTableId": {
                    "Ref": "publicSubnet1RouteTable"
                }
            }, 
            "Type": "AWS::EC2::Route"
        }, 
        "publicSubnet1EgressRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "publicSubnet1RouteTable"
                }, 
                "SubnetId": {
                    "Ref": "publicSubnet1"
                }
            }, 
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        }, 
        "publicSubnet1RouteTable": {
            "Properties": {
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::RouteTable"
        }, 
        "publicSubnet1SecurityGroup": {
            "Properties": {
                "GroupDescription": "Security Group for the public subnet for az 1", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "-1", 
                        "IpProtocol": "-1", 
                        "ToPort": "-1"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "networkAddresses", 
                                "subnet1", 
                                "private"
                            ]
                        }, 
                        "FromPort": "-1", 
                        "IpProtocol": "-1", 
                        "ToPort": "-1"
                    }
                ], 
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "vpc": {
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "networkAddresses", 
                        "vpcBase", 
                        "cidr"
                    ]
                }, 
                "EnableDnsHostnames": "true", 
                "EnableDnsSupport": "true"
            }, 
            "Type": "AWS::EC2::VPC"
        }, 
        "vpcIgw": {
            "Type": "AWS::EC2::InternetGateway"
        }
    }
}